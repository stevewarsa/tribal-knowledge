{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/category.ts","webpack:///./src/app/database.service.ts","webpack:///./src/app/knowledgebase-entry.ts","webpack:///./src/app/knowledgebase-list/knowledgebase-list.component.css","webpack:///./src/app/knowledgebase-list/knowledgebase-list.component.html","webpack:///./src/app/knowledgebase-list/knowledgebase-list.component.ts","webpack:///./src/app/new-kb-entry/new-kb-entry.component.css","webpack:///./src/app/new-kb-entry/new-kb-entry.component.html","webpack:///./src/app/new-kb-entry/new-kb-entry.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { KnowledgebaseListComponent } from './knowledgebase-list/knowledgebase-list.component';\nimport { NewKbEntryComponent } from './new-kb-entry/new-kb-entry.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {path: '', component: KnowledgebaseListComponent},\n  {path: 'newentry', component: NewKbEntryComponent},\n  {path: 'home', component: NewKbEntryComponent},\n  {path: 'list', component: KnowledgebaseListComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div class=\\\"container\\\">\\r\\n    <h3>\\r\\n        {{title}}\\r\\n    </h3>\\r\\n</div>\\r\\n<router-outlet></router-outlet>\"","import { DatabaseService } from './database.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kb-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'Tribal Knowledge';\n\n  constructor(private databaseService: DatabaseService) {}\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NewKbEntryComponent } from './new-kb-entry/new-kb-entry.component';\nimport { KnowledgebaseListComponent } from './knowledgebase-list/knowledgebase-list.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NewKbEntryComponent,\n    KnowledgebaseListComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    NgbModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { KnowledgebaseEntry } from './knowledgebase-entry';\r\nexport class Category {\r\n    categoryCd: string = null;\r\n    categoryNm: string = null;\r\n    categoryDs: string = null;\r\n    knowledgebaseEntry: KnowledgebaseEntry = null;\r\n}","import { Category } from './category';\nimport { KnowledgebaseEntry } from './knowledgebase-entry';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n  private _url: string = \"/api/v1/\";\n\n  constructor(private httpService: HttpClient) { }\n\n  public saveKbEntry(entry: KnowledgebaseEntry): Observable<KnowledgebaseEntry> {\n    return this.httpService.post<KnowledgebaseEntry>(`${this._url}addkbentry`, entry);\n  }\n\n  public getAllKbEntries(): Observable<KnowledgebaseEntry[]> {\n    return this.httpService.get<KnowledgebaseEntry[]>(`${this._url}kbentries`);\n  }\n\n  public getAllCategories(): Observable<Category[]> {\n    return this.httpService.get<Category[]>(`${this._url}categories`);\n  }\n}\n","import { Category } from './category';\r\n\r\nexport class KnowledgebaseEntry {\r\n    id: number = -1;\r\n    title: string = null;\r\n    longDescription: string = null;\r\n    category: Category = null;\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2tub3dsZWRnZWJhc2UtbGlzdC9rbm93bGVkZ2ViYXNlLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div *ngIf=\\\"initializing\\\" class=\\\"container\\\">\\n  {{initializingMessage}}\\n</div>\\n<div *ngIf=\\\"!initializing\\\" class=\\\"container\\\">\\n  <div class=\\\"btn-toolbar mb-3\\\" role=\\\"toolbar\\\" aria-label=\\\"Navigational controls\\\">\\n    <div class=\\\"btn-group mr-3\\\" role=\\\"group\\\" aria-label=\\\"Primary Navigation\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-success m-1\\\" (click)=\\\"newKbEntry()\\\"><i class=\\\"fa fa-plus\\\"></i> New...</button>\\n    </div>\\n  </div>\\n  <div *ngFor=\\\"let kbEntry of kbEntries\\\" class=\\\"card border-primary mb-3\\\">\\n    <div class=\\\"card-header\\\"><strong>Category:</strong> {{kbEntry.category.categoryNm}}</div>\\n    <div class=\\\"card-body text-primary\\\">\\n      <h5 class=\\\"card-title\\\">{{kbEntry.title}}</h5>\\n      <p class=\\\"card-text\\\" style=\\\"white-space: pre-wrap;\\\">\\n        {{kbEntry.longDescription}}\\n      </p>\\n    </div>\\n  </div>\\n</div>\"","import { KnowledgebaseEntry } from './../knowledgebase-entry';\nimport { Component, OnInit } from '@angular/core';\nimport { DatabaseService } from '../database.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  templateUrl: './knowledgebase-list.component.html',\n  styleUrls: ['./knowledgebase-list.component.css']\n})\nexport class KnowledgebaseListComponent implements OnInit {\n  initializing: boolean = false;\n  initializingMessage: string = null;\n  kbEntries: KnowledgebaseEntry[] = [];\n\n  constructor(private databaseService: DatabaseService, private route: Router) { }\n\n  ngOnInit() {\n    this.initializing = true;\n    this.initializingMessage = \"Retrieving all Knowledgebase Entries...\";\n    this.databaseService.getAllKbEntries().subscribe((entries: KnowledgebaseEntry[]) => {\n      console.log(entries);\n      this.kbEntries = entries;\n      this.initializing = false;\n      this.initializingMessage = null;\n    });\n  }\n\n  newKbEntry() {\n    this.route.navigate(['newentry']);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25ldy1rYi1lbnRyeS9uZXcta2ItZW50cnkuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div *ngIf=\\\"initializing\\\" class=\\\"container\\\">\\n  {{initializingMessage}}\\n</div>\\n<div *ngIf=\\\"!initializing\\\" class=\\\"container\\\">\\n  <form class=\\\"mr-3 mb-2\\\">\\n    <button [hidden]=\\\"showForm\\\" type=\\\"button\\\" (click)=\\\"showForm = true\\\" class=\\\"btn btn-secondary mr-2\\\"><i class=\\\"fa fa-plus-square\\\"></i> New Category</button>\\n    <button [hidden]=\\\"!showForm\\\" type=\\\"button\\\" (click)=\\\"showForm = false\\\" class=\\\"btn btn-secondary mr-2\\\"><i class=\\\"fa fa-minus-square\\\"></i> Hide New Category</button>\\n    <div [hidden]=\\\"!showForm\\\" class=\\\"form-group\\\">\\n      <label class=\\\"mr-2\\\" for=\\\"newcategorycd\\\">New Category Code:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"newcategorycd\\\" name=\\\"newcategorycd\\\" [(ngModel)]=\\\"newCategoryCd\\\">\\n      <label class=\\\"mr-2\\\" for=\\\"newcategorynm\\\">New Category Name:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"newcategorynm\\\" name=\\\"newcategorynm\\\" [(ngModel)]=\\\"newCategoryNm\\\">\\n    </div>\\n    <div [hidden]=\\\"showForm\\\" class=\\\"form-group\\\">\\n      <label class=\\\"mr-2\\\" for=\\\"existingcategory\\\">Existing Category:</label>\\n      <select class=\\\"form-control\\\" id=\\\"existingcategory\\\" name=\\\"existingcategory\\\" [(ngModel)]=\\\"selectedCategory\\\">\\n        <option value=\\\"NOSELECTION\\\"></option>\\n        <option *ngFor=\\\"let category of categories\\\" [ngValue]=\\\"category\\\">{{category.categoryNm}}</option>\\n      </select>\\n    </div>\\n    <div class=\\\"form-group mr-3\\\">\\n      <label class=\\\"mr-2\\\" for=\\\"title\\\">Title:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" name=\\\"title\\\" [(ngModel)]=\\\"kb.title\\\">\\n    </div>\\n    <div class=\\\"form-group mr-3\\\">\\n      <label class=\\\"mr-2\\\" for=\\\"desc\\\">Description:</label>\\n      <textarea class=\\\"form-control\\\" name=\\\"desc\\\" id=\\\"desc\\\" name=\\\"desc\\\" cols=\\\"20\\\" rows=\\\"5\\\" [(ngModel)]=\\\"kb.longDescription\\\"></textarea>\\n    </div>\\n    <div class=\\\"form-group mr-3\\\" *ngIf=\\\"errorMessage !== null\\\" style=\\\"padding: 10px !important;\\\">\\n      <font color=\\\"red\\\"><b>{{errorMessage}}</b></font>\\n    </div>\\n    <button type=\\\"button\\\" (click)=\\\"saveKbEntry()\\\" class=\\\"btn btn-primary mr-2\\\">Save</button>\\n    <button type=\\\"button\\\" (click)=\\\"home()\\\" class=\\\"btn btn-secondary mr-2\\\">Home</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DatabaseService } from '../database.service';\nimport { Router } from '@angular/router';\nimport { KnowledgebaseEntry } from '../knowledgebase-entry';\nimport { Category } from '../category';\n\n@Component({\n  templateUrl: './new-kb-entry.component.html',\n  styleUrls: ['./new-kb-entry.component.css']\n})\nexport class NewKbEntryComponent implements OnInit {\n  initializing: boolean = false;\n  initializingMessage: string = null;\n  errorMessage: string = null;\n  newCategoryNm: string = null;\n  newCategoryCd: string = null;\n  kb: KnowledgebaseEntry = new KnowledgebaseEntry();\n  categories: Category[] = [];\n  selectedCategory: Category = null;\n  showForm: boolean = false;\n\n  constructor(private databaseService: DatabaseService, private route: Router) { }\n\n  ngOnInit() {\n    this.initializing = true;\n    this.initializingMessage = \"Retrieving all categories...\";\n    this.databaseService.getAllCategories().subscribe((categories: Category[]) => {\n      console.log(categories);\n      this.categories = categories;\n      this.initializing = false;\n      this.initializingMessage = null;\n    })\n  }\n\n  saveKbEntry() {\n    console.log(\"Here is the kb to be saved:\");\n    if (this.newCategoryCd && this.newCategoryNm) {\n      this.kb.category = new Category();\n      this.kb.category.categoryCd = this.newCategoryCd;\n      this.kb.category.categoryNm = this.newCategoryNm;\n    } else {\n      this.kb.category = this.selectedCategory;\n    }\n    console.log(this.kb);\n    this.databaseService.saveKbEntry(this.kb).subscribe((returnedEntry: KnowledgebaseEntry) => {\n      console.log(\"Here is the entry I got back:\");\n      console.log(returnedEntry);\n      this.route.navigate(['']);\n    });\n  }\n\n  home() {\n    this.route.navigate(['']);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}